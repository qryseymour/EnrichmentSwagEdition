{
	/* List type
	   ALLOW - whitelist, only the items in this list WILL have the ability to be hexed
	   DENY - blacklist, all the items in this list WONT have the ability to be hexed
	*/
	"listType": "DENY",
	// An item list. What the list does depends on the "listType"
	"itemList": [],
	// Whether the "Calamitous" Full armor effect should apply.
	"fullArmorEffectApply": true,
	/* "Aflame" Hex settings
	   
	   shouldRegister - whether the hex should be obtainable
	   AblazeDuration/Amplifier - The duration (in ticks) & the amplifier of the Ablaze debuff
	   AflameDuration/Amplifier - The duration (in ticks) & the amplifier of the Aflame debuff
	*/
	"aflameHex": {
		"shouldRegister": true,
		"AblazeDuration": 80,
		"AblazeAmplifier": 1,
		"AflameDuration": 40,
		"AflameAmplifier": 0
	},
	/* Amplify Hex settings
	   
	   shouldRegister - whether the hex should be obtainable
	   dropChance - chance for the additional mined blocks to drop
	   exhaustionAmount - how much exhaustion is applied for each additional mined block
	   toolDamage - how much durability is lost per additional mined block
	*/
	"amplifyHex": {
		"shouldRegister": true,
		"dropChance": 0.5,
		"exhaustionAmount": 0.01,
		"toolDamage": 1
	},
	/* Aquatique Hex settings
	   
	   shouldRegister - whether the hex should be obtainable
	   speedMultiplier - by how much the movement speed in water is multiplied (Anything below 1 will actually make the wearer slower)
	*/
	"aquatiqueHex": {
		"shouldRegister": true,
		"speedMultiplier": 2.0
	},
	/* Averting Hex settings
	   
	   shouldRegister - whether the hex should be obtainable
	   damageReduction - how much each armor piece with Averting adds to the chance of negating damage (Percentage value, 0.125 = 12.5%)
	   avertingCooldown - for how much time (in ticks) the invinsibility frames will be taken away after dodging damage
	*/
	"avertingHex": {
		"shouldRegister": true,
		"damageReduction": 0.125,
		"avertingCooldown": 50
	},
	/* Bloodthirsty Hex settings
	   
	   shouldRegister - whether the hex should be obtainable
	   minimumHealAmount - minimum amount of Health that will be regenerated
	   maximumHealAmount - maximum amount of Health that will be regenerated
	   healModifier - heal scaling amount (Percentage value, 0.125 = 12.5%)
	*/
	"bloodthirstyHex": {
		"shouldRegister": true,
		"minimumHealAmount": 3.0,
		"maximumHealAmount": 10.0,
		"healModifier": 0.125
	},
	/* Celebration Hex settings
	   
	   shouldRegister - whether the hex should be obtainable
	   minimumDivergence - minimum variation of the firework's direction
	   maximumDivergence - maximum variation of the firework's direction
	   faulyChance - the chance that the launched firework will be faulty (Percentage value, 0.333 = 33.3%)
	   faultySpeed - speed of the faulty firework
	*/
	"celebrationHex": {
		"shouldRegister": true,
		"minimumDivergence": -5.0,
		"maximumDivergence": 5.0,
		"faulyChance": 0.333,
		"faultySpeed": 0.0625
	},
	/* Disfigurement Hex settings
	   
	   shouldRegister - whether the hex should be obtainable
	   boxRadius - radius of the effect
	   hungerDuration/Amplifier - The duration (in ticks) & the amplifier of the Hunger debuff
	   weaknessDuration/Amplifier - The duration (in ticks) & the amplifier of the Weakness debuff
	*/
	"disfigurementHex": {
		"shouldRegister": true,
		"boxRadius": 3,
		"hungerDuration": 100,
		"hungerAmplifier": 0,
		"weaknessDuration": 100,
		"weaknessAmplifier": 0
	},
	/* Displaced Hex settings
	   
	   shouldRegister - whether the hex should be obtainable
	*/
	"displacedHex": {
		"shouldRegister": true
	},
	/* Divine Hex settings
	   
	   shouldRegister - whether the hex should be obtainable
	   defaultDuration/Amplifier - The duration (in seconds) & the amplifier of the Ablaze & Traitorous debuffs
	   ironcladDuration/Amplifier - The duration (in seconds) & the amplifier of the Ironclad debuffs
	   exhaustionDuration/Amplifier - The duration (in seconds) & the amplifier of the Exhaustion debuffs
	   etherealDuration/Amplifier - The duration (in seconds) & the amplifier of the Ethereal debuffs
	*/
	"divineHex": {
		"shouldRegister": true,
		"defaultDuration": 20,
		"defaultAmplifier": 0,
		"ironcladDuration": 40,
		"ironcladAmplifier": 3,
		"exhaustionDuration": 60,
		"exhaustionAmplifier": 9,
		"etherealDuration": 80,
		"etherealAmplifier": 5
	},
	/* Dynamique Hex settings
	   
	   shouldRegister - whether the hex should be obtainable
	   jumpModifier - the additional amount of velocity the user will receive (0.15625 = 1 block)
	*/
	"dynamiqueHex": {
		"shouldRegister": true,
		"jumpModifier": 0.15625
	},
	/* Ephemeral Hex settings
	   
	   shouldRegister - whether the hex should be obtainable
	   damageAddition - how much more damage the weapon does at first
	   debuffDuration - the initial duration of the debuff (in ticks)
	   debuffDecayLength - how much each additional level of the debuff lasts
	*/
	"ephemeralHex": {
		"shouldRegister": true,
		"damageAddition": 4.0,
		"debuffDuration": 150,
		"debuffDecayLength": 50
	},
	/* Famishment Hex settings
	   
	   shouldRegister - whether the hex should be obtainable
	*/
	"famishmentHex": {
		"shouldRegister": true
	},
	/* Flaring Hex settings
	   
	   shouldRegister - whether the hex should be obtainable
	   isSoulFire - whether the fire spawned should be Soul Fire
	*/
	"flaringHex": {
		"shouldRegister": true,
		"isSoulFire": false
	},
	/* Frantic Hex settings
	   
	   shouldRegister - whether the hex should be obtainable
	   franticDuration - the initial duration of the debuff (in ticks)
	   franticDecayLength - how much each additional level of the debuff lasts
	   damageModifier - the amplifier of the debuff is divided by this to get the actual damage modifier
	   Formula: damage = damage * (1 + (FranticDebuffLevel / damageModifier))
	*/
	"franticHex": {
		"shouldRegister": true,
		"franticDuration": 100,
		"franticDecayLength": 50,
		"damageModifier": 2.0
	},
	/* Ironclad Hex settings
	   
	   shouldRegister - whether the hex should be obtainable
	   debuffDuration - the initial duration of the debuff (in ticks)
	   debuffDecayLength - how much each additional level of the debuff lasts
	   robesDebuffModifier - by how much the initial duration of the debuff is divided
	   damageReductionAmount - the amount of damage reduction this hex provides
	   Formula: damage = damage * (1 - damageReductionAmount)
	*/
	"ironcladHex": {
		"shouldRegister": true,
		"debuffDuration": 200,
		"debuffDecayLength": 10,
		"robesDebuffModifier": 2,
		"damageReductionAmount": 0.33000001311302185
	},
	/* Linger Hex settings
	   
	   shouldRegister - whether the hex should be obtainable
	   lingerRadius - the radius from the trident in which the debuff is applied
	   debuffDuration/Amplifier - The duration (in seconds) & the amplifier of the Ablaze debuff
	   tridentDamage - the amount of durability damage the trident receives overtime (This is affected by the amount of creatures in the radius)
	*/
	"lingerHex": {
		"shouldRegister": true,
		"lingerRadius": 3,
		"debuffDuration": 25,
		"debuffAmplifier": 0,
		"tridentDamage": 1
	},
	/* Metamorphosis Hex settings
	   
	   shouldRegister - whether the hex should be obtainable
	   foodModifier - modifies the amount of food recieved per half heart (anything below 1 will nullify the effect of the hex)
	   saturationAmount - how much saturation is applied
	*/
	"metamorphosisHex": {
		"shouldRegister": true,
		"foodModifier": 1.0,
		"saturationAmount": 0.0
	},
	/* Overburden Hex settings
	   
	   shouldRegister - whether the hex should be obtainable
	   buffDuration - the initial duration of the buff (in ticks)
	   movementSpeedModifier - how much speed is removed for each level of the buff
	*/
	"overburdenHex": {
		"shouldRegister": true,
		"buffDuration": 200,
		"movementSpeedModifier": 0.02500000037252903
	},
	/* Persecuted Hex settings
	   
	   shouldRegister - whether the hex should be obtainable
	   healthCap - the maximum amount of damage a weapon with this hex can deal
	   debuffDurationModifier - a modifier determining how much the debuff lasts for
	*/
	"persecutedHex": {
		"shouldRegister": true,
		"healthCap": 25.0,
		"debuffDurationModifier": 10
	},
	/* Ruinous Hex settings
	   
	   shouldRegister - whether the hex should be obtainable
	   explosionPower - the power of the explosion
	*/
	"ruinousHex": {
		"shouldRegister": true,
		"explosionPower": 1.25
	},
	/* Seize Hex settings
	   
	   shouldRegister - whether the hex should be obtainable
	   maxPullableHP - determines whether the creature can be pulled based on it's max Health
	   minimumPullStrength - the minimum strength of the pull if the trident doesn't have Loyalty
	   maximumPullStrength - the maximum strength of the pull if the trident doesn't have Loyalty
	*/
	"seizeHex": {
		"shouldRegister": true,
		"maxPullableHP": 50,
		"minimumPullStrength": 1.0,
		"maximumPullStrength": 4.0
	},
	/* Sepulture Hex settings
	   
	   shouldRegister - whether the hex should be obtainable
	   angerChance - chance that a skull will target the user instead of the nearest entity
	   explosionPower - the power of the produced explosion
	*/
	"sepultureHex": {
		"shouldRegister": true,
		"angerChance": 0.333,
		"explosionPower": 1.5
	},
	/* Traitorous Hex settings
	   
	   shouldRegister - whether the hex should be obtainable
	   debuffDuration - The duration (in ticks) of the Traitorous debuff
	   cooldownDuration - The duration (in ticks) of the weapon cooldown
	*/
	"traitorousHex": {
		"shouldRegister": true,
		"debuffDuration": 80,
		"cooldownDuration": 40
	},
	/* Vindictive Hex settings
	   
	   shouldRegister - whether the hex should be obtainable
	   maxAmplifier - max amount of damage this hex can do when the debuff runs out
	   vindictiveDuration - the initial duration of the Vindictive debuff (in ticks)
	   vindictiveDecayLength - how much each additional level of the Vindictive debuff lasts
	   smoulderingDuration - the initial duration of the Smouldering debuff (in ticks)
	   smoulderingDecayLength - how much each additional level of the Smouldering debuff lasts
	*/
	"vindictiveHex": {
		"shouldRegister": true,
		"maxAmplifier": 10,
		"vindictiveDuration": 60,
		"vindictiveDecayLength": 20,
		"smoulderingDuration": 60,
		"smoulderingDecayLength": 20
	},
	/* Aggravate Hex settings
	   
	   shouldRegister - whether the hex should be obtainable
	   chargeTicks - How much ticks does it take to add a single charge
	   arrowsPerCharge - How much arrows is a single charge equal to
	   explosionPower - The power of the explosion on an overcharge
	*/
	"aggravateHex": {
		"shouldRegister": true,
		"chargeTicks": 10,
		"arrowsPerCharge": 1,
		"explosionPower": 2.0
	},
	/* Volatility Hex settings
	   
	   shouldRegister - whether the hex should be obtainable
	   explosionPower - the power of the explosion
	*/
	"volatilityHex": {
		"shouldRegister": true,
		"explosionPower": 1.0
	},
	/* Phased Hex settings
	   
	   shouldRegister - whether the hex should be obtainable
	   initialDamage - the initial damage the hitscan does
	   damageMultiplier - by how much the initial damage is multiplied for each pierced enemy
	   powerModifier - how much damage does a level of Power adds to the initial damage (Setting to 0 will make hitscan ignore Power)
	   flameSeconds - for how much seconds the enemy will be set on fire (Settings to 0 will make hitscan ignore Flame)
	*/
	"phasedHex": {
		"shouldRegister": true,
		"hitscanDistance": 64,
		"initialDamage": 5.0,
		"damageMultiplier": 0.4000000059604645,
		"powerModifier": 1.0,
		"flameSeconds": 5
	},
	/* Provision Hex settings
	   
	   shouldRegister - whether the hex should be obtainable
	   maxReloadSpeed - the max speed the reload indicator can have
	   itemCooldown - the cooldown penalty in ticks
	*/
	"provisionHex": {
		"shouldRegister": true,
		"maxReloadSpeed": 10,
		"itemCooldown": 80
	},
	/* Overclock Hex settings
	   
	   shouldRegister - whether the hex should be obtainable
	   overheatLasting - how much ticks will the game wait before removing overheat stacks
	*/
	"overclockHex": {
		"shouldRegister": true,
		"overheatLasting": 200
	}
}